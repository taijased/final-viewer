//
//  ARQLogo.swift
//  ProjectName
//
//  Created by AuthorName on 18.02.2020.
//  Copyright Â© 2020 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

final public class ARQLogo : NSObject {
    
    
 

    //// Drawing Methods

    @objc dynamic public class func drawViewerLogo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 116), resizing: ResizingBehavior = .aspectFit, fillColor: UIColor) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 160, height: 116), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 160, y: resizedFrame.height / 116)


        //// Color Declarations
//        let fillColor = UIColor(red: 0.278, green: 0.216, blue: 0.839, alpha: 1.000)

        //// arq-logo
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 0, y: 43.5))
        bezierPath.addLine(to: CGPoint(x: 0, y: 58))
        bezierPath.addLine(to: CGPoint(x: 0, y: 87))
        bezierPath.addLine(to: CGPoint(x: 14.55, y: 87))
        bezierPath.addLine(to: CGPoint(x: 14.55, y: 58))
        bezierPath.addLine(to: CGPoint(x: 29.09, y: 58))
        bezierPath.addLine(to: CGPoint(x: 29.09, y: 87))
        bezierPath.addLine(to: CGPoint(x: 43.64, y: 87))
        bezierPath.addLine(to: CGPoint(x: 43.64, y: 58))
        bezierPath.addLine(to: CGPoint(x: 43.64, y: 43.5))
        bezierPath.addLine(to: CGPoint(x: 43.64, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 43.64, y: 0))
        bezierPath.addLine(to: CGPoint(x: 29.09, y: 0))
        bezierPath.addLine(to: CGPoint(x: 14.55, y: 0))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 0, y: 14.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 29.09, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 14.55, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 14.55, y: 43.5))
        bezierPath.addLine(to: CGPoint(x: 29.09, y: 43.5))
        bezierPath.addLine(to: CGPoint(x: 29.09, y: 14.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 72.73, y: 0))
        bezierPath.addLine(to: CGPoint(x: 58.18, y: 0))
        bezierPath.addLine(to: CGPoint(x: 58.18, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 58.18, y: 43.5))
        bezierPath.addLine(to: CGPoint(x: 58.18, y: 58))
        bezierPath.addLine(to: CGPoint(x: 58.18, y: 87))
        bezierPath.addLine(to: CGPoint(x: 72.73, y: 87))
        bezierPath.addLine(to: CGPoint(x: 72.73, y: 58))
        bezierPath.addLine(to: CGPoint(x: 82.42, y: 58))
        bezierPath.addLine(to: CGPoint(x: 87.27, y: 87))
        bezierPath.addLine(to: CGPoint(x: 101.82, y: 87))
        bezierPath.addLine(to: CGPoint(x: 96.97, y: 58))
        bezierPath.addLine(to: CGPoint(x: 101.82, y: 58))
        bezierPath.addLine(to: CGPoint(x: 101.82, y: 43.5))
        bezierPath.addLine(to: CGPoint(x: 101.82, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 101.82, y: 0))
        bezierPath.addLine(to: CGPoint(x: 87.27, y: 0))
        bezierPath.addLine(to: CGPoint(x: 72.73, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 87.27, y: 43.5))
        bezierPath.addLine(to: CGPoint(x: 80, y: 43.5))
        bezierPath.addLine(to: CGPoint(x: 72.73, y: 43.5))
        bezierPath.addLine(to: CGPoint(x: 72.73, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 87.27, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 87.27, y: 43.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 116.36, y: 0))
        bezierPath.addLine(to: CGPoint(x: 130.91, y: 0))
        bezierPath.addLine(to: CGPoint(x: 145.46, y: 0))
        bezierPath.addLine(to: CGPoint(x: 160, y: 0))
        bezierPath.addLine(to: CGPoint(x: 160, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 160, y: 72.5))
        bezierPath.addLine(to: CGPoint(x: 152.73, y: 72.5))
        bezierPath.addLine(to: CGPoint(x: 160, y: 87))
        bezierPath.addLine(to: CGPoint(x: 130.91, y: 87))
        bezierPath.addLine(to: CGPoint(x: 116.36, y: 87))
        bezierPath.addLine(to: CGPoint(x: 116.36, y: 72.5))
        bezierPath.addLine(to: CGPoint(x: 116.36, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 116.36, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 130.91, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 145.46, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 145.46, y: 72.5))
        bezierPath.addLine(to: CGPoint(x: 130.91, y: 72.5))
        bezierPath.addLine(to: CGPoint(x: 130.91, y: 14.5))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0, y: 101.5))
        bezier2Path.addLine(to: CGPoint(x: 5.16, y: 116))
        bezier2Path.addLine(to: CGPoint(x: 7.22, y: 116))
        bezier2Path.addLine(to: CGPoint(x: 12.36, y: 101.5))
        bezier2Path.addLine(to: CGPoint(x: 10.21, y: 101.5))
        bezier2Path.addLine(to: CGPoint(x: 6.18, y: 113.1))
        bezier2Path.addLine(to: CGPoint(x: 2.16, y: 101.5))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 101.5))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 32, y: 101.5))
        bezier2Path.addLine(to: CGPoint(x: 32, y: 116))
        bezier2Path.addLine(to: CGPoint(x: 34.18, y: 116))
        bezier2Path.addLine(to: CGPoint(x: 34.18, y: 101.5))
        bezier2Path.addLine(to: CGPoint(x: 32, y: 101.5))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 56.6, y: 113.93))
        bezier2Path.addLine(to: CGPoint(x: 64, y: 113.93))
        bezier2Path.addLine(to: CGPoint(x: 64, y: 116))
        bezier2Path.addLine(to: CGPoint(x: 54.55, y: 116))
        bezier2Path.addLine(to: CGPoint(x: 54.55, y: 101.5))
        bezier2Path.addLine(to: CGPoint(x: 63.82, y: 101.5))
        bezier2Path.addLine(to: CGPoint(x: 63.82, y: 103.57))
        bezier2Path.addLine(to: CGPoint(x: 56.6, y: 103.57))
        bezier2Path.addLine(to: CGPoint(x: 56.6, y: 107.41))
        bezier2Path.addLine(to: CGPoint(x: 62.32, y: 107.41))
        bezier2Path.addLine(to: CGPoint(x: 62.32, y: 109.48))
        bezier2Path.addLine(to: CGPoint(x: 56.6, y: 109.48))
        bezier2Path.addLine(to: CGPoint(x: 56.6, y: 113.93))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 96.54, y: 112.58))
        bezier2Path.addLine(to: CGPoint(x: 93.39, y: 101.5))
        bezier2Path.addLine(to: CGPoint(x: 91.35, y: 101.5))
        bezier2Path.addLine(to: CGPoint(x: 88.2, y: 112.58))
        bezier2Path.addLine(to: CGPoint(x: 85.05, y: 101.5))
        bezier2Path.addLine(to: CGPoint(x: 82.91, y: 101.5))
        bezier2Path.addLine(to: CGPoint(x: 87.17, y: 116))
        bezier2Path.addLine(to: CGPoint(x: 89.22, y: 116))
        bezier2Path.addLine(to: CGPoint(x: 92.37, y: 105.03))
        bezier2Path.addLine(to: CGPoint(x: 95.52, y: 116))
        bezier2Path.addLine(to: CGPoint(x: 97.55, y: 116))
        bezier2Path.addLine(to: CGPoint(x: 101.82, y: 101.5))
        bezier2Path.addLine(to: CGPoint(x: 99.69, y: 101.5))
        bezier2Path.addLine(to: CGPoint(x: 96.54, y: 112.58))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 123.51, y: 113.93))
        bezier2Path.addLine(to: CGPoint(x: 130.91, y: 113.93))
        bezier2Path.addLine(to: CGPoint(x: 130.91, y: 116))
        bezier2Path.addLine(to: CGPoint(x: 121.45, y: 116))
        bezier2Path.addLine(to: CGPoint(x: 121.45, y: 101.5))
        bezier2Path.addLine(to: CGPoint(x: 130.73, y: 101.5))
        bezier2Path.addLine(to: CGPoint(x: 130.73, y: 103.57))
        bezier2Path.addLine(to: CGPoint(x: 123.51, y: 103.57))
        bezier2Path.addLine(to: CGPoint(x: 123.51, y: 107.41))
        bezier2Path.addLine(to: CGPoint(x: 129.23, y: 107.41))
        bezier2Path.addLine(to: CGPoint(x: 129.23, y: 109.48))
        bezier2Path.addLine(to: CGPoint(x: 123.51, y: 109.48))
        bezier2Path.addLine(to: CGPoint(x: 123.51, y: 113.93))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 149.82, y: 116))
        bezier2Path.addLine(to: CGPoint(x: 149.82, y: 101.5))
        bezier2Path.addLine(to: CGPoint(x: 155.38, y: 101.5))
        bezier2Path.addCurve(to: CGPoint(x: 158.42, y: 102.78), controlPoint1: CGPoint(x: 156.6, y: 101.5), controlPoint2: CGPoint(x: 157.61, y: 101.93))
        bezier2Path.addCurve(to: CGPoint(x: 159.62, y: 105.96), controlPoint1: CGPoint(x: 159.22, y: 103.64), controlPoint2: CGPoint(x: 159.62, y: 104.7))
        bezier2Path.addCurve(to: CGPoint(x: 159.35, y: 107.62), controlPoint1: CGPoint(x: 159.62, y: 106.55), controlPoint2: CGPoint(x: 159.53, y: 107.11))
        bezier2Path.addCurve(to: CGPoint(x: 158.68, y: 108.84), controlPoint1: CGPoint(x: 159.16, y: 108.14), controlPoint2: CGPoint(x: 158.94, y: 108.54))
        bezier2Path.addCurve(to: CGPoint(x: 157.91, y: 109.62), controlPoint1: CGPoint(x: 158.43, y: 109.14), controlPoint2: CGPoint(x: 158.17, y: 109.4))
        bezier2Path.addCurve(to: CGPoint(x: 157.25, y: 110.08), controlPoint1: CGPoint(x: 157.65, y: 109.84), controlPoint2: CGPoint(x: 157.43, y: 109.99))
        bezier2Path.addLine(to: CGPoint(x: 156.98, y: 110.21))
        bezier2Path.addLine(to: CGPoint(x: 160, y: 116))
        bezier2Path.addLine(to: CGPoint(x: 157.74, y: 116))
        bezier2Path.addLine(to: CGPoint(x: 154.91, y: 110.41))
        bezier2Path.addLine(to: CGPoint(x: 151.89, y: 110.41))
        bezier2Path.addLine(to: CGPoint(x: 151.89, y: 116))
        bezier2Path.addLine(to: CGPoint(x: 149.82, y: 116))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 156.93, y: 107.65))
        bezier2Path.addCurve(to: CGPoint(x: 157.54, y: 105.95), controlPoint1: CGPoint(x: 157.34, y: 107.2), controlPoint2: CGPoint(x: 157.54, y: 106.63))
        bezier2Path.addCurve(to: CGPoint(x: 156.92, y: 104.25), controlPoint1: CGPoint(x: 157.54, y: 105.28), controlPoint2: CGPoint(x: 157.34, y: 104.71))
        bezier2Path.addCurve(to: CGPoint(x: 155.38, y: 103.57), controlPoint1: CGPoint(x: 156.51, y: 103.8), controlPoint2: CGPoint(x: 155.99, y: 103.57))
        bezier2Path.addLine(to: CGPoint(x: 151.89, y: 103.57))
        bezier2Path.addLine(to: CGPoint(x: 151.89, y: 108.33))
        bezier2Path.addLine(to: CGPoint(x: 155.38, y: 108.33))
        bezier2Path.addCurve(to: CGPoint(x: 156.93, y: 107.65), controlPoint1: CGPoint(x: 155.99, y: 108.33), controlPoint2: CGPoint(x: 156.51, y: 108.11))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }




    @objc(ARQLogoResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
